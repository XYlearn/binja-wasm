
# -*- coding: utf-8 -*-
"""
Generated from wabt/src/opcode.def
"""

# from binaryninja import 

def _u8(c):
    return ord(c)

class WasmOpcode:
    opcodes = {}
    val_opcodes = {}
    sig_opcodes = {}

    def __init__(self, name, tr, t1, t2, t3, m, prefix, code, signame):
        self.name = name
        self.tr = tr
        self.t1 = t1
        self.t2 = t2
        self.t3 = t3
        self.m = m
        self.prefix = prefix
        self.code = code
        self.signame = signame

    def get_branch_type(self):
        return None

    @classmethod
    def add_opcode(cls, opcode):
        cls.opcodes[opcode.name] = opcode
        cls.val_opcodes[(opcode.prefix, opcode.prefix)] = opcode
        cls.sig_opcodes[opcode.signame] = opcode

    @classmethod
    def get_by_bytes(cls, data):
        if cls.get_op_length(data) == 2:
            first, second = _u8(data[0:1]), _u8(data[1:2])
            return cls.val_opcodes.get((first, second))
        else:
            first = _u8(data[0:1])
            return cls.val_opcodes.get((0, first))

    @classmethod
    def get_by_sig(cls, sig):
        return cls.sig_opcodes.get(sig)

    @classmethod
    def get_op_length(cls, data):
        first = _u8(data[0:1])
        if first >= 0xfc:
            return 2
        else:
            return 1

max_mnem_length = 27
#                                            name               tr		t1		t2		t3		m		prefix	code	signame
WasmOpcode.add_opcode(WasmOpcode('unreachable'               ,	None,	None,	None,	None,	0x0,	0x0,	0x0,	'Unreachable'))
WasmOpcode.add_opcode(WasmOpcode('nop'                       ,	None,	None,	None,	None,	0x0,	0x0,	0x1,	'Nop'))
WasmOpcode.add_opcode(WasmOpcode('block'                     ,	None,	None,	None,	None,	0x0,	0x0,	0x2,	'Block'))
WasmOpcode.add_opcode(WasmOpcode('loop'                      ,	None,	None,	None,	None,	0x0,	0x0,	0x3,	'Loop'))
WasmOpcode.add_opcode(WasmOpcode('if'                        ,	None,	None,	None,	None,	0x0,	0x0,	0x4,	'If'))
WasmOpcode.add_opcode(WasmOpcode('else'                      ,	None,	None,	None,	None,	0x0,	0x0,	0x5,	'Else'))
WasmOpcode.add_opcode(WasmOpcode('try'                       ,	None,	None,	None,	None,	0x0,	0x0,	0x6,	'Try'))
WasmOpcode.add_opcode(WasmOpcode('catch'                     ,	None,	None,	None,	None,	0x0,	0x0,	0x7,	'Catch'))
WasmOpcode.add_opcode(WasmOpcode('throw'                     ,	None,	None,	None,	None,	0x0,	0x0,	0x8,	'Throw'))
WasmOpcode.add_opcode(WasmOpcode('rethrow'                   ,	None,	None,	None,	None,	0x0,	0x0,	0x9,	'Rethrow'))
WasmOpcode.add_opcode(WasmOpcode('if_except'                 ,	None,	None,	None,	None,	0x0,	0x0,	0xa,	'IfExcept'))
WasmOpcode.add_opcode(WasmOpcode('end'                       ,	None,	None,	None,	None,	0x0,	0x0,	0xb,	'End'))
WasmOpcode.add_opcode(WasmOpcode('br'                        ,	None,	None,	None,	None,	0x0,	0x0,	0xc,	'Br'))
WasmOpcode.add_opcode(WasmOpcode('br_if'                     ,	None,	None,	None,	None,	0x0,	0x0,	0xd,	'BrIf'))
WasmOpcode.add_opcode(WasmOpcode('br_table'                  ,	None,	None,	None,	None,	0x0,	0x0,	0xe,	'BrTable'))
WasmOpcode.add_opcode(WasmOpcode('return'                    ,	None,	None,	None,	None,	0x0,	0x0,	0xf,	'Return'))
WasmOpcode.add_opcode(WasmOpcode('call'                      ,	None,	None,	None,	None,	0x0,	0x0,	0x10,	'Call'))
WasmOpcode.add_opcode(WasmOpcode('call_indirect'             ,	None,	None,	None,	None,	0x0,	0x0,	0x11,	'CallIndirect'))
WasmOpcode.add_opcode(WasmOpcode('return_call'               ,	None,	None,	None,	None,	0x0,	0x0,	0x12,	'ReturnCall'))
WasmOpcode.add_opcode(WasmOpcode('return_call_indirect'      ,	None,	None,	None,	None,	0x0,	0x0,	0x13,	'ReturnCallIndirect'))
WasmOpcode.add_opcode(WasmOpcode('drop'                      ,	None,	None,	None,	None,	0x0,	0x0,	0x1a,	'Drop'))
WasmOpcode.add_opcode(WasmOpcode('select'                    ,	None,	None,	None,	None,	0x0,	0x0,	0x1b,	'Select'))
WasmOpcode.add_opcode(WasmOpcode('get_local'                 ,	None,	None,	None,	None,	0x0,	0x0,	0x20,	'GetLocal'))
WasmOpcode.add_opcode(WasmOpcode('set_local'                 ,	None,	None,	None,	None,	0x0,	0x0,	0x21,	'SetLocal'))
WasmOpcode.add_opcode(WasmOpcode('tee_local'                 ,	None,	None,	None,	None,	0x0,	0x0,	0x22,	'TeeLocal'))
WasmOpcode.add_opcode(WasmOpcode('get_global'                ,	None,	None,	None,	None,	0x0,	0x0,	0x23,	'GetGlobal'))
WasmOpcode.add_opcode(WasmOpcode('set_global'                ,	None,	None,	None,	None,	0x0,	0x0,	0x24,	'SetGlobal'))
WasmOpcode.add_opcode(WasmOpcode('i32.load'                  ,	'i32',	'i32',	None,	None,	0x4,	0x0,	0x28,	'I32Load'))
WasmOpcode.add_opcode(WasmOpcode('i64.load'                  ,	'i64',	'i32',	None,	None,	0x8,	0x0,	0x29,	'I64Load'))
WasmOpcode.add_opcode(WasmOpcode('f32.load'                  ,	'f32',	'i32',	None,	None,	0x4,	0x0,	0x2a,	'F32Load'))
WasmOpcode.add_opcode(WasmOpcode('f64.load'                  ,	'f64',	'i32',	None,	None,	0x8,	0x0,	0x2b,	'F64Load'))
WasmOpcode.add_opcode(WasmOpcode('i32.load8_s'               ,	'i32',	'i32',	None,	None,	0x1,	0x0,	0x2c,	'I32Load8S'))
WasmOpcode.add_opcode(WasmOpcode('i32.load8_u'               ,	'i32',	'i32',	None,	None,	0x1,	0x0,	0x2d,	'I32Load8U'))
WasmOpcode.add_opcode(WasmOpcode('i32.load16_s'              ,	'i32',	'i32',	None,	None,	0x2,	0x0,	0x2e,	'I32Load16S'))
WasmOpcode.add_opcode(WasmOpcode('i32.load16_u'              ,	'i32',	'i32',	None,	None,	0x2,	0x0,	0x2f,	'I32Load16U'))
WasmOpcode.add_opcode(WasmOpcode('i64.load8_s'               ,	'i64',	'i32',	None,	None,	0x1,	0x0,	0x30,	'I64Load8S'))
WasmOpcode.add_opcode(WasmOpcode('i64.load8_u'               ,	'i64',	'i32',	None,	None,	0x1,	0x0,	0x31,	'I64Load8U'))
WasmOpcode.add_opcode(WasmOpcode('i64.load16_s'              ,	'i64',	'i32',	None,	None,	0x2,	0x0,	0x32,	'I64Load16S'))
WasmOpcode.add_opcode(WasmOpcode('i64.load16_u'              ,	'i64',	'i32',	None,	None,	0x2,	0x0,	0x33,	'I64Load16U'))
WasmOpcode.add_opcode(WasmOpcode('i64.load32_s'              ,	'i64',	'i32',	None,	None,	0x4,	0x0,	0x34,	'I64Load32S'))
WasmOpcode.add_opcode(WasmOpcode('i64.load32_u'              ,	'i64',	'i32',	None,	None,	0x4,	0x0,	0x35,	'I64Load32U'))
WasmOpcode.add_opcode(WasmOpcode('i32.store'                 ,	None,	'i32',	'i32',	None,	0x4,	0x0,	0x36,	'I32Store'))
WasmOpcode.add_opcode(WasmOpcode('i64.store'                 ,	None,	'i32',	'i64',	None,	0x8,	0x0,	0x37,	'I64Store'))
WasmOpcode.add_opcode(WasmOpcode('f32.store'                 ,	None,	'i32',	'f32',	None,	0x4,	0x0,	0x38,	'F32Store'))
WasmOpcode.add_opcode(WasmOpcode('f64.store'                 ,	None,	'i32',	'f64',	None,	0x8,	0x0,	0x39,	'F64Store'))
WasmOpcode.add_opcode(WasmOpcode('i32.store8'                ,	None,	'i32',	'i32',	None,	0x1,	0x0,	0x3a,	'I32Store8'))
WasmOpcode.add_opcode(WasmOpcode('i32.store16'               ,	None,	'i32',	'i32',	None,	0x2,	0x0,	0x3b,	'I32Store16'))
WasmOpcode.add_opcode(WasmOpcode('i64.store8'                ,	None,	'i32',	'i64',	None,	0x1,	0x0,	0x3c,	'I64Store8'))
WasmOpcode.add_opcode(WasmOpcode('i64.store16'               ,	None,	'i32',	'i64',	None,	0x2,	0x0,	0x3d,	'I64Store16'))
WasmOpcode.add_opcode(WasmOpcode('i64.store32'               ,	None,	'i32',	'i64',	None,	0x4,	0x0,	0x3e,	'I64Store32'))
WasmOpcode.add_opcode(WasmOpcode('memory.size'               ,	'i32',	None,	None,	None,	0x0,	0x0,	0x3f,	'MemorySize'))
WasmOpcode.add_opcode(WasmOpcode('memory.grow'               ,	'i32',	'i32',	None,	None,	0x0,	0x0,	0x40,	'MemoryGrow'))
WasmOpcode.add_opcode(WasmOpcode('i32.const'                 ,	'i32',	None,	None,	None,	0x0,	0x0,	0x41,	'I32Const'))
WasmOpcode.add_opcode(WasmOpcode('i64.const'                 ,	'i64',	None,	None,	None,	0x0,	0x0,	0x42,	'I64Const'))
WasmOpcode.add_opcode(WasmOpcode('f32.const'                 ,	'f32',	None,	None,	None,	0x0,	0x0,	0x43,	'F32Const'))
WasmOpcode.add_opcode(WasmOpcode('f64.const'                 ,	'f64',	None,	None,	None,	0x0,	0x0,	0x44,	'F64Const'))
WasmOpcode.add_opcode(WasmOpcode('i32.eqz'                   ,	'i32',	'i32',	None,	None,	0x0,	0x0,	0x45,	'I32Eqz'))
WasmOpcode.add_opcode(WasmOpcode('i32.eq'                    ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x46,	'I32Eq'))
WasmOpcode.add_opcode(WasmOpcode('i32.ne'                    ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x47,	'I32Ne'))
WasmOpcode.add_opcode(WasmOpcode('i32.lt_s'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x48,	'I32LtS'))
WasmOpcode.add_opcode(WasmOpcode('i32.lt_u'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x49,	'I32LtU'))
WasmOpcode.add_opcode(WasmOpcode('i32.gt_s'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x4a,	'I32GtS'))
WasmOpcode.add_opcode(WasmOpcode('i32.gt_u'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x4b,	'I32GtU'))
WasmOpcode.add_opcode(WasmOpcode('i32.le_s'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x4c,	'I32LeS'))
WasmOpcode.add_opcode(WasmOpcode('i32.le_u'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x4d,	'I32LeU'))
WasmOpcode.add_opcode(WasmOpcode('i32.ge_s'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x4e,	'I32GeS'))
WasmOpcode.add_opcode(WasmOpcode('i32.ge_u'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x4f,	'I32GeU'))
WasmOpcode.add_opcode(WasmOpcode('i64.eqz'                   ,	'i32',	'i64',	None,	None,	0x0,	0x0,	0x50,	'I64Eqz'))
WasmOpcode.add_opcode(WasmOpcode('i64.eq'                    ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x51,	'I64Eq'))
WasmOpcode.add_opcode(WasmOpcode('i64.ne'                    ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x52,	'I64Ne'))
WasmOpcode.add_opcode(WasmOpcode('i64.lt_s'                  ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x53,	'I64LtS'))
WasmOpcode.add_opcode(WasmOpcode('i64.lt_u'                  ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x54,	'I64LtU'))
WasmOpcode.add_opcode(WasmOpcode('i64.gt_s'                  ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x55,	'I64GtS'))
WasmOpcode.add_opcode(WasmOpcode('i64.gt_u'                  ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x56,	'I64GtU'))
WasmOpcode.add_opcode(WasmOpcode('i64.le_s'                  ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x57,	'I64LeS'))
WasmOpcode.add_opcode(WasmOpcode('i64.le_u'                  ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x58,	'I64LeU'))
WasmOpcode.add_opcode(WasmOpcode('i64.ge_s'                  ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x59,	'I64GeS'))
WasmOpcode.add_opcode(WasmOpcode('i64.ge_u'                  ,	'i32',	'i64',	'i64',	None,	0x0,	0x0,	0x5a,	'I64GeU'))
WasmOpcode.add_opcode(WasmOpcode('f32.eq'                    ,	'i32',	'f32',	'f32',	None,	0x0,	0x0,	0x5b,	'F32Eq'))
WasmOpcode.add_opcode(WasmOpcode('f32.ne'                    ,	'i32',	'f32',	'f32',	None,	0x0,	0x0,	0x5c,	'F32Ne'))
WasmOpcode.add_opcode(WasmOpcode('f32.lt'                    ,	'i32',	'f32',	'f32',	None,	0x0,	0x0,	0x5d,	'F32Lt'))
WasmOpcode.add_opcode(WasmOpcode('f32.gt'                    ,	'i32',	'f32',	'f32',	None,	0x0,	0x0,	0x5e,	'F32Gt'))
WasmOpcode.add_opcode(WasmOpcode('f32.le'                    ,	'i32',	'f32',	'f32',	None,	0x0,	0x0,	0x5f,	'F32Le'))
WasmOpcode.add_opcode(WasmOpcode('f32.ge'                    ,	'i32',	'f32',	'f32',	None,	0x0,	0x0,	0x60,	'F32Ge'))
WasmOpcode.add_opcode(WasmOpcode('f64.eq'                    ,	'i32',	'f64',	'f64',	None,	0x0,	0x0,	0x61,	'F64Eq'))
WasmOpcode.add_opcode(WasmOpcode('f64.ne'                    ,	'i32',	'f64',	'f64',	None,	0x0,	0x0,	0x62,	'F64Ne'))
WasmOpcode.add_opcode(WasmOpcode('f64.lt'                    ,	'i32',	'f64',	'f64',	None,	0x0,	0x0,	0x63,	'F64Lt'))
WasmOpcode.add_opcode(WasmOpcode('f64.gt'                    ,	'i32',	'f64',	'f64',	None,	0x0,	0x0,	0x64,	'F64Gt'))
WasmOpcode.add_opcode(WasmOpcode('f64.le'                    ,	'i32',	'f64',	'f64',	None,	0x0,	0x0,	0x65,	'F64Le'))
WasmOpcode.add_opcode(WasmOpcode('f64.ge'                    ,	'i32',	'f64',	'f64',	None,	0x0,	0x0,	0x66,	'F64Ge'))
WasmOpcode.add_opcode(WasmOpcode('i32.clz'                   ,	'i32',	'i32',	None,	None,	0x0,	0x0,	0x67,	'I32Clz'))
WasmOpcode.add_opcode(WasmOpcode('i32.ctz'                   ,	'i32',	'i32',	None,	None,	0x0,	0x0,	0x68,	'I32Ctz'))
WasmOpcode.add_opcode(WasmOpcode('i32.popcnt'                ,	'i32',	'i32',	None,	None,	0x0,	0x0,	0x69,	'I32Popcnt'))
WasmOpcode.add_opcode(WasmOpcode('i32.add'                   ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x6a,	'I32Add'))
WasmOpcode.add_opcode(WasmOpcode('i32.sub'                   ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x6b,	'I32Sub'))
WasmOpcode.add_opcode(WasmOpcode('i32.mul'                   ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x6c,	'I32Mul'))
WasmOpcode.add_opcode(WasmOpcode('i32.div_s'                 ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x6d,	'I32DivS'))
WasmOpcode.add_opcode(WasmOpcode('i32.div_u'                 ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x6e,	'I32DivU'))
WasmOpcode.add_opcode(WasmOpcode('i32.rem_s'                 ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x6f,	'I32RemS'))
WasmOpcode.add_opcode(WasmOpcode('i32.rem_u'                 ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x70,	'I32RemU'))
WasmOpcode.add_opcode(WasmOpcode('i32.and'                   ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x71,	'I32And'))
WasmOpcode.add_opcode(WasmOpcode('i32.or'                    ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x72,	'I32Or'))
WasmOpcode.add_opcode(WasmOpcode('i32.xor'                   ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x73,	'I32Xor'))
WasmOpcode.add_opcode(WasmOpcode('i32.shl'                   ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x74,	'I32Shl'))
WasmOpcode.add_opcode(WasmOpcode('i32.shr_s'                 ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x75,	'I32ShrS'))
WasmOpcode.add_opcode(WasmOpcode('i32.shr_u'                 ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x76,	'I32ShrU'))
WasmOpcode.add_opcode(WasmOpcode('i32.rotl'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x77,	'I32Rotl'))
WasmOpcode.add_opcode(WasmOpcode('i32.rotr'                  ,	'i32',	'i32',	'i32',	None,	0x0,	0x0,	0x78,	'I32Rotr'))
WasmOpcode.add_opcode(WasmOpcode('i64.clz'                   ,	'i64',	'i64',	None,	None,	0x0,	0x0,	0x79,	'I64Clz'))
WasmOpcode.add_opcode(WasmOpcode('i64.ctz'                   ,	'i64',	'i64',	None,	None,	0x0,	0x0,	0x7a,	'I64Ctz'))
WasmOpcode.add_opcode(WasmOpcode('i64.popcnt'                ,	'i64',	'i64',	None,	None,	0x0,	0x0,	0x7b,	'I64Popcnt'))
WasmOpcode.add_opcode(WasmOpcode('i64.add'                   ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x7c,	'I64Add'))
WasmOpcode.add_opcode(WasmOpcode('i64.sub'                   ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x7d,	'I64Sub'))
WasmOpcode.add_opcode(WasmOpcode('i64.mul'                   ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x7e,	'I64Mul'))
WasmOpcode.add_opcode(WasmOpcode('i64.div_s'                 ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x7f,	'I64DivS'))
WasmOpcode.add_opcode(WasmOpcode('i64.div_u'                 ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x80,	'I64DivU'))
WasmOpcode.add_opcode(WasmOpcode('i64.rem_s'                 ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x81,	'I64RemS'))
WasmOpcode.add_opcode(WasmOpcode('i64.rem_u'                 ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x82,	'I64RemU'))
WasmOpcode.add_opcode(WasmOpcode('i64.and'                   ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x83,	'I64And'))
WasmOpcode.add_opcode(WasmOpcode('i64.or'                    ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x84,	'I64Or'))
WasmOpcode.add_opcode(WasmOpcode('i64.xor'                   ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x85,	'I64Xor'))
WasmOpcode.add_opcode(WasmOpcode('i64.shl'                   ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x86,	'I64Shl'))
WasmOpcode.add_opcode(WasmOpcode('i64.shr_s'                 ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x87,	'I64ShrS'))
WasmOpcode.add_opcode(WasmOpcode('i64.shr_u'                 ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x88,	'I64ShrU'))
WasmOpcode.add_opcode(WasmOpcode('i64.rotl'                  ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x89,	'I64Rotl'))
WasmOpcode.add_opcode(WasmOpcode('i64.rotr'                  ,	'i64',	'i64',	'i64',	None,	0x0,	0x0,	0x8a,	'I64Rotr'))
WasmOpcode.add_opcode(WasmOpcode('f32.abs'                   ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x8b,	'F32Abs'))
WasmOpcode.add_opcode(WasmOpcode('f32.neg'                   ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x8c,	'F32Neg'))
WasmOpcode.add_opcode(WasmOpcode('f32.ceil'                  ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x8d,	'F32Ceil'))
WasmOpcode.add_opcode(WasmOpcode('f32.floor'                 ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x8e,	'F32Floor'))
WasmOpcode.add_opcode(WasmOpcode('f32.trunc'                 ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x8f,	'F32Trunc'))
WasmOpcode.add_opcode(WasmOpcode('f32.nearest'               ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x90,	'F32Nearest'))
WasmOpcode.add_opcode(WasmOpcode('f32.sqrt'                  ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x91,	'F32Sqrt'))
WasmOpcode.add_opcode(WasmOpcode('f32.add'                   ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x92,	'F32Add'))
WasmOpcode.add_opcode(WasmOpcode('f32.sub'                   ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x93,	'F32Sub'))
WasmOpcode.add_opcode(WasmOpcode('f32.mul'                   ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x94,	'F32Mul'))
WasmOpcode.add_opcode(WasmOpcode('f32.div'                   ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x95,	'F32Div'))
WasmOpcode.add_opcode(WasmOpcode('f32.min'                   ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x96,	'F32Min'))
WasmOpcode.add_opcode(WasmOpcode('f32.max'                   ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x97,	'F32Max'))
WasmOpcode.add_opcode(WasmOpcode('f32.copysign'              ,	'f32',	'f32',	'f32',	None,	0x0,	0x0,	0x98,	'F32Copysign'))
WasmOpcode.add_opcode(WasmOpcode('f64.abs'                   ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0x99,	'F64Abs'))
WasmOpcode.add_opcode(WasmOpcode('f64.neg'                   ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0x9a,	'F64Neg'))
WasmOpcode.add_opcode(WasmOpcode('f64.ceil'                  ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0x9b,	'F64Ceil'))
WasmOpcode.add_opcode(WasmOpcode('f64.floor'                 ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0x9c,	'F64Floor'))
WasmOpcode.add_opcode(WasmOpcode('f64.trunc'                 ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0x9d,	'F64Trunc'))
WasmOpcode.add_opcode(WasmOpcode('f64.nearest'               ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0x9e,	'F64Nearest'))
WasmOpcode.add_opcode(WasmOpcode('f64.sqrt'                  ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0x9f,	'F64Sqrt'))
WasmOpcode.add_opcode(WasmOpcode('f64.add'                   ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0xa0,	'F64Add'))
WasmOpcode.add_opcode(WasmOpcode('f64.sub'                   ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0xa1,	'F64Sub'))
WasmOpcode.add_opcode(WasmOpcode('f64.mul'                   ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0xa2,	'F64Mul'))
WasmOpcode.add_opcode(WasmOpcode('f64.div'                   ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0xa3,	'F64Div'))
WasmOpcode.add_opcode(WasmOpcode('f64.min'                   ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0xa4,	'F64Min'))
WasmOpcode.add_opcode(WasmOpcode('f64.max'                   ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0xa5,	'F64Max'))
WasmOpcode.add_opcode(WasmOpcode('f64.copysign'              ,	'f64',	'f64',	'f64',	None,	0x0,	0x0,	0xa6,	'F64Copysign'))
WasmOpcode.add_opcode(WasmOpcode('i32.wrap/i64'              ,	'i32',	'i64',	None,	None,	0x0,	0x0,	0xa7,	'I32WrapI64'))
WasmOpcode.add_opcode(WasmOpcode('i32.trunc_s/f32'           ,	'i32',	'f32',	None,	None,	0x0,	0x0,	0xa8,	'I32TruncSF32'))
WasmOpcode.add_opcode(WasmOpcode('i32.trunc_u/f32'           ,	'i32',	'f32',	None,	None,	0x0,	0x0,	0xa9,	'I32TruncUF32'))
WasmOpcode.add_opcode(WasmOpcode('i32.trunc_s/f64'           ,	'i32',	'f64',	None,	None,	0x0,	0x0,	0xaa,	'I32TruncSF64'))
WasmOpcode.add_opcode(WasmOpcode('i32.trunc_u/f64'           ,	'i32',	'f64',	None,	None,	0x0,	0x0,	0xab,	'I32TruncUF64'))
WasmOpcode.add_opcode(WasmOpcode('i64.extend_s/i32'          ,	'i64',	'i32',	None,	None,	0x0,	0x0,	0xac,	'I64ExtendSI32'))
WasmOpcode.add_opcode(WasmOpcode('i64.extend_u/i32'          ,	'i64',	'i32',	None,	None,	0x0,	0x0,	0xad,	'I64ExtendUI32'))
WasmOpcode.add_opcode(WasmOpcode('i64.trunc_s/f32'           ,	'i64',	'f32',	None,	None,	0x0,	0x0,	0xae,	'I64TruncSF32'))
WasmOpcode.add_opcode(WasmOpcode('i64.trunc_u/f32'           ,	'i64',	'f32',	None,	None,	0x0,	0x0,	0xaf,	'I64TruncUF32'))
WasmOpcode.add_opcode(WasmOpcode('i64.trunc_s/f64'           ,	'i64',	'f64',	None,	None,	0x0,	0x0,	0xb0,	'I64TruncSF64'))
WasmOpcode.add_opcode(WasmOpcode('i64.trunc_u/f64'           ,	'i64',	'f64',	None,	None,	0x0,	0x0,	0xb1,	'I64TruncUF64'))
WasmOpcode.add_opcode(WasmOpcode('f32.convert_s/i32'         ,	'f32',	'i32',	None,	None,	0x0,	0x0,	0xb2,	'F32ConvertSI32'))
WasmOpcode.add_opcode(WasmOpcode('f32.convert_u/i32'         ,	'f32',	'i32',	None,	None,	0x0,	0x0,	0xb3,	'F32ConvertUI32'))
WasmOpcode.add_opcode(WasmOpcode('f32.convert_s/i64'         ,	'f32',	'i64',	None,	None,	0x0,	0x0,	0xb4,	'F32ConvertSI64'))
WasmOpcode.add_opcode(WasmOpcode('f32.convert_u/i64'         ,	'f32',	'i64',	None,	None,	0x0,	0x0,	0xb5,	'F32ConvertUI64'))
WasmOpcode.add_opcode(WasmOpcode('f32.demote/f64'            ,	'f32',	'f64',	None,	None,	0x0,	0x0,	0xb6,	'F32DemoteF64'))
WasmOpcode.add_opcode(WasmOpcode('f64.convert_s/i32'         ,	'f64',	'i32',	None,	None,	0x0,	0x0,	0xb7,	'F64ConvertSI32'))
WasmOpcode.add_opcode(WasmOpcode('f64.convert_u/i32'         ,	'f64',	'i32',	None,	None,	0x0,	0x0,	0xb8,	'F64ConvertUI32'))
WasmOpcode.add_opcode(WasmOpcode('f64.convert_s/i64'         ,	'f64',	'i64',	None,	None,	0x0,	0x0,	0xb9,	'F64ConvertSI64'))
WasmOpcode.add_opcode(WasmOpcode('f64.convert_u/i64'         ,	'f64',	'i64',	None,	None,	0x0,	0x0,	0xba,	'F64ConvertUI64'))
WasmOpcode.add_opcode(WasmOpcode('f64.promote/f32'           ,	'f64',	'f32',	None,	None,	0x0,	0x0,	0xbb,	'F64PromoteF32'))
WasmOpcode.add_opcode(WasmOpcode('i32.reinterpret/f32'       ,	'i32',	'f32',	None,	None,	0x0,	0x0,	0xbc,	'I32ReinterpretF32'))
WasmOpcode.add_opcode(WasmOpcode('i64.reinterpret/f64'       ,	'i64',	'f64',	None,	None,	0x0,	0x0,	0xbd,	'I64ReinterpretF64'))
WasmOpcode.add_opcode(WasmOpcode('f32.reinterpret/i32'       ,	'f32',	'i32',	None,	None,	0x0,	0x0,	0xbe,	'F32ReinterpretI32'))
WasmOpcode.add_opcode(WasmOpcode('f64.reinterpret/i64'       ,	'f64',	'i64',	None,	None,	0x0,	0x0,	0xbf,	'F64ReinterpretI64'))
WasmOpcode.add_opcode(WasmOpcode('i32.extend8_s'             ,	'i32',	'i32',	None,	None,	0x0,	0x0,	0xc0,	'I32Extend8S'))
WasmOpcode.add_opcode(WasmOpcode('i32.extend16_s'            ,	'i32',	'i32',	None,	None,	0x0,	0x0,	0xc1,	'I32Extend16S'))
WasmOpcode.add_opcode(WasmOpcode('i64.extend8_s'             ,	'i64',	'i64',	None,	None,	0x0,	0x0,	0xc2,	'I64Extend8S'))
WasmOpcode.add_opcode(WasmOpcode('i64.extend16_s'            ,	'i64',	'i64',	None,	None,	0x0,	0x0,	0xc3,	'I64Extend16S'))
WasmOpcode.add_opcode(WasmOpcode('i64.extend32_s'            ,	'i64',	'i64',	None,	None,	0x0,	0x0,	0xc4,	'I64Extend32S'))
WasmOpcode.add_opcode(WasmOpcode('alloca'                    ,	None,	None,	None,	None,	0x0,	0x0,	0xe0,	'InterpAlloca'))
WasmOpcode.add_opcode(WasmOpcode('br_unless'                 ,	None,	None,	None,	None,	0x0,	0x0,	0xe1,	'InterpBrUnless'))
WasmOpcode.add_opcode(WasmOpcode('call_host'                 ,	None,	None,	None,	None,	0x0,	0x0,	0xe2,	'InterpCallHost'))
WasmOpcode.add_opcode(WasmOpcode('data'                      ,	None,	None,	None,	None,	0x0,	0x0,	0xe3,	'InterpData'))
WasmOpcode.add_opcode(WasmOpcode('drop_keep'                 ,	None,	None,	None,	None,	0x0,	0x0,	0xe4,	'InterpDropKeep'))
WasmOpcode.add_opcode(WasmOpcode('i32.trunc_s:sat/f32'       ,	'i32',	'f32',	None,	None,	0x0,	0xfc,	0x0,	'I32TruncSSatF32'))
WasmOpcode.add_opcode(WasmOpcode('i32.trunc_u:sat/f32'       ,	'i32',	'f32',	None,	None,	0x0,	0xfc,	0x1,	'I32TruncUSatF32'))
WasmOpcode.add_opcode(WasmOpcode('i32.trunc_s:sat/f64'       ,	'i32',	'f64',	None,	None,	0x0,	0xfc,	0x2,	'I32TruncSSatF64'))
WasmOpcode.add_opcode(WasmOpcode('i32.trunc_u:sat/f64'       ,	'i32',	'f64',	None,	None,	0x0,	0xfc,	0x3,	'I32TruncUSatF64'))
WasmOpcode.add_opcode(WasmOpcode('i64.trunc_s:sat/f32'       ,	'i64',	'f32',	None,	None,	0x0,	0xfc,	0x4,	'I64TruncSSatF32'))
WasmOpcode.add_opcode(WasmOpcode('i64.trunc_u:sat/f32'       ,	'i64',	'f32',	None,	None,	0x0,	0xfc,	0x5,	'I64TruncUSatF32'))
WasmOpcode.add_opcode(WasmOpcode('i64.trunc_s:sat/f64'       ,	'i64',	'f64',	None,	None,	0x0,	0xfc,	0x6,	'I64TruncSSatF64'))
WasmOpcode.add_opcode(WasmOpcode('i64.trunc_u:sat/f64'       ,	'i64',	'f64',	None,	None,	0x0,	0xfc,	0x7,	'I64TruncUSatF64'))
WasmOpcode.add_opcode(WasmOpcode('memory.init'               ,	None,	'i32',	'i32',	'i32',	0x0,	0xfc,	0x8,	'MemoryInit'))
WasmOpcode.add_opcode(WasmOpcode('memory.drop'               ,	None,	None,	None,	None,	0x0,	0xfc,	0x9,	'MemoryDrop'))
WasmOpcode.add_opcode(WasmOpcode('memory.copy'               ,	None,	'i32',	'i32',	'i32',	0x0,	0xfc,	0xa,	'MemoryCopy'))
WasmOpcode.add_opcode(WasmOpcode('memory.fill'               ,	None,	'i32',	'i32',	'i32',	0x0,	0xfc,	0xb,	'MemoryFill'))
WasmOpcode.add_opcode(WasmOpcode('table.init'                ,	None,	'i32',	'i32',	'i32',	0x0,	0xfc,	0xc,	'TableInit'))
WasmOpcode.add_opcode(WasmOpcode('table.drop'                ,	None,	None,	None,	None,	0x0,	0xfc,	0xd,	'TableDrop'))
WasmOpcode.add_opcode(WasmOpcode('table.copy'                ,	None,	'i32',	'i32',	'i32',	0x0,	0xfc,	0xe,	'TableCopy'))
WasmOpcode.add_opcode(WasmOpcode('v128.load'                 ,	'v128',	'i32',	None,	None,	0x16,	0xfd,	0x0,	'V128Load'))
WasmOpcode.add_opcode(WasmOpcode('v128.store'                ,	None,	'i32',	'v128',	None,	0x16,	0xfd,	0x1,	'V128Store'))
WasmOpcode.add_opcode(WasmOpcode('v128.const'                ,	'v128',	None,	None,	None,	0x0,	0xfd,	0x2,	'V128Const'))
WasmOpcode.add_opcode(WasmOpcode('v8x16.shuffle'             ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x3,	'V8X16Shuffle'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.splat'               ,	'v128',	'i32',	None,	None,	0x0,	0xfd,	0x4,	'I8X16Splat'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.extract_lane_s'      ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x5,	'I8X16ExtractLaneS'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.extract_lane_u'      ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x6,	'I8X16ExtractLaneU'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.replace_lane'        ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x7,	'I8X16ReplaceLane'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.splat'               ,	'v128',	'i32',	None,	None,	0x0,	0xfd,	0x8,	'I16X8Splat'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.extract_lane_s'      ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x9,	'I16X8ExtractLaneS'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.extract_lane_u'      ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0xa,	'I16X8ExtractLaneU'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.replace_lane'        ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0xb,	'I16X8ReplaceLane'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.splat'               ,	'v128',	'i32',	None,	None,	0x0,	0xfd,	0xc,	'I32X4Splat'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.extract_lane'        ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0xd,	'I32X4ExtractLane'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.replace_lane'        ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0xe,	'I32X4ReplaceLane'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.splat'               ,	'v128',	'i64',	None,	None,	0x0,	0xfd,	0xf,	'I64X2Splat'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.extract_lane'        ,	'i64',	'v128',	None,	None,	0x0,	0xfd,	0x10,	'I64X2ExtractLane'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.replace_lane'        ,	'v128',	'v128',	'i64',	None,	0x0,	0xfd,	0x11,	'I64X2ReplaceLane'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.splat'               ,	'v128',	'f32',	None,	None,	0x0,	0xfd,	0x12,	'F32X4Splat'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.extract_lane'        ,	'f32',	'v128',	None,	None,	0x0,	0xfd,	0x13,	'F32X4ExtractLane'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.replace_lane'        ,	'v128',	'v128',	'f32',	None,	0x0,	0xfd,	0x14,	'F32X4ReplaceLane'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.splat'               ,	'v128',	'f64',	None,	None,	0x0,	0xfd,	0x15,	'F64X2Splat'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.extract_lane'        ,	'f64',	'v128',	None,	None,	0x0,	0xfd,	0x16,	'F64X2ExtractLane'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.replace_lane'        ,	'v128',	'v128',	'f64',	None,	0x0,	0xfd,	0x17,	'F64X2ReplaceLane'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.eq'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x18,	'I8X16Eq'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.ne'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x19,	'I8X16Ne'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.lt_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x1a,	'I8X16LtS'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.lt_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x1b,	'I8X16LtU'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.gt_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x1c,	'I8X16GtS'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.gt_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x1d,	'I8X16GtU'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.le_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x1e,	'I8X16LeS'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.le_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x1f,	'I8X16LeU'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.ge_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x20,	'I8X16GeS'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.ge_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x21,	'I8X16GeU'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.eq'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x22,	'I16X8Eq'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.ne'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x23,	'I16X8Ne'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.lt_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x24,	'I16X8LtS'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.lt_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x25,	'I16X8LtU'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.gt_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x26,	'I16X8GtS'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.gt_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x27,	'I16X8GtU'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.le_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x28,	'I16X8LeS'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.le_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x29,	'I16X8LeU'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.ge_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x2a,	'I16X8GeS'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.ge_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x2b,	'I16X8GeU'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.eq'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x2c,	'I32X4Eq'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.ne'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x2d,	'I32X4Ne'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.lt_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x2e,	'I32X4LtS'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.lt_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x2f,	'I32X4LtU'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.gt_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x30,	'I32X4GtS'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.gt_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x31,	'I32X4GtU'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.le_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x32,	'I32X4LeS'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.le_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x33,	'I32X4LeU'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.ge_s'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x34,	'I32X4GeS'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.ge_u'                ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x35,	'I32X4GeU'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.eq'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x40,	'F32X4Eq'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.ne'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x41,	'F32X4Ne'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.lt'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x42,	'F32X4Lt'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.gt'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x43,	'F32X4Gt'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.le'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x44,	'F32X4Le'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.ge'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x45,	'F32X4Ge'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.eq'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x46,	'F64X2Eq'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.ne'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x47,	'F64X2Ne'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.lt'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x48,	'F64X2Lt'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.gt'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x49,	'F64X2Gt'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.le'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x4a,	'F64X2Le'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.ge'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x4b,	'F64X2Ge'))
WasmOpcode.add_opcode(WasmOpcode('v128.not'                  ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0x4c,	'V128Not'))
WasmOpcode.add_opcode(WasmOpcode('v128.and'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x4d,	'V128And'))
WasmOpcode.add_opcode(WasmOpcode('v128.or'                   ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x4e,	'V128Or'))
WasmOpcode.add_opcode(WasmOpcode('v128.xor'                  ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x4f,	'V128Xor'))
WasmOpcode.add_opcode(WasmOpcode('v128.bitselect'            ,	'v128',	'v128',	'v128',	'v128',	0x0,	0xfd,	0x50,	'V128BitSelect'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.neg'                 ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0x51,	'I8X16Neg'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.any_true'            ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x52,	'I8X16AnyTrue'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.all_true'            ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x53,	'I8X16AllTrue'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.shl'                 ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x54,	'I8X16Shl'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.shr_s'               ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x55,	'I8X16ShrS'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.shr_u'               ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x56,	'I8X16ShrU'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.add'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x57,	'I8X16Add'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.add_saturate_s'      ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x58,	'I8X16AddSaturateS'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.add_saturate_u'      ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x59,	'I8X16AddSaturateU'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.sub'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x5a,	'I8X16Sub'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.sub_saturate_s'      ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x5b,	'I8X16SubSaturateS'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.sub_saturate_u'      ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x5c,	'I8X16SubSaturateU'))
WasmOpcode.add_opcode(WasmOpcode('i8x16.mul'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x5d,	'I8X16Mul'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.neg'                 ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0x62,	'I16X8Neg'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.any_true'            ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x63,	'I16X8AnyTrue'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.all_true'            ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x64,	'I16X8AllTrue'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.shl'                 ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x65,	'I16X8Shl'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.shr_s'               ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x66,	'I16X8ShrS'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.shr_u'               ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x67,	'I16X8ShrU'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.add'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x68,	'I16X8Add'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.add_saturate_s'      ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x69,	'I16X8AddSaturateS'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.add_saturate_u'      ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x6a,	'I16X8AddSaturateU'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.sub'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x6b,	'I16X8Sub'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.sub_saturate_s'      ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x6c,	'I16X8SubSaturateS'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.sub_saturate_u'      ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x6d,	'I16X8SubSaturateU'))
WasmOpcode.add_opcode(WasmOpcode('i16x8.mul'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x6e,	'I16X8Mul'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.neg'                 ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0x73,	'I32X4Neg'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.any_true'            ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x74,	'I32X4AnyTrue'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.all_true'            ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x75,	'I32X4AllTrue'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.shl'                 ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x76,	'I32X4Shl'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.shr_s'               ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x77,	'I32X4ShrS'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.shr_u'               ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x78,	'I32X4ShrU'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.add'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x79,	'I32X4Add'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.sub'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x7c,	'I32X4Sub'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.mul'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x7f,	'I32X4Mul'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.neg'                 ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0x84,	'I64X2Neg'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.any_true'            ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x85,	'I64X2AnyTrue'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.all_true'            ,	'i32',	'v128',	None,	None,	0x0,	0xfd,	0x86,	'I64X2AllTrue'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.shl'                 ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x87,	'I64X2Shl'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.shr_s'               ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x88,	'I64X2ShrS'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.shr_u'               ,	'v128',	'v128',	'i32',	None,	0x0,	0xfd,	0x89,	'I64X2ShrU'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.add'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x8a,	'I64X2Add'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.sub'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x8d,	'I64X2Sub'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.abs'                 ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0x95,	'F32X4Abs'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.neg'                 ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0x96,	'F32X4Neg'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.sqrt'                ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0x97,	'F32X4Sqrt'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.add'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x9a,	'F32X4Add'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.sub'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x9b,	'F32X4Sub'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.mul'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x9c,	'F32X4Mul'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.div'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x9d,	'F32X4Div'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.min'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x9e,	'F32X4Min'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.max'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0x9f,	'F32X4Max'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.abs'                 ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xa0,	'F64X2Abs'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.neg'                 ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xa1,	'F64X2Neg'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.sqrt'                ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xa2,	'F64X2Sqrt'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.add'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0xa5,	'F64X2Add'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.sub'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0xa6,	'F64X2Sub'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.mul'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0xa7,	'F64X2Mul'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.div'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0xa8,	'F64X2Div'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.min'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0xa9,	'F64X2Min'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.max'                 ,	'v128',	'v128',	'v128',	None,	0x0,	0xfd,	0xaa,	'F64X2Max'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.trunc_s/f32x4:sat'   ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xab,	'I32X4TruncSF32X4Sat'))
WasmOpcode.add_opcode(WasmOpcode('i32x4.trunc_u/f32x4:sat'   ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xac,	'I32X4TruncUF32X4Sat'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.trunc_s/f64x2:sat'   ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xad,	'I64X2TruncSF64X2Sat'))
WasmOpcode.add_opcode(WasmOpcode('i64x2.trunc_u/f64x2:sat'   ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xae,	'I64X2TruncUF64X2Sat'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.convert_s/i32x4'     ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xaf,	'F32X4ConvertSI32X4'))
WasmOpcode.add_opcode(WasmOpcode('f32x4.convert_u/i32x4'     ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xb0,	'F32X4ConvertUI32X4'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.convert_s/i64x2'     ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xb1,	'F64X2ConvertSI64X2'))
WasmOpcode.add_opcode(WasmOpcode('f64x2.convert_u/i64x2'     ,	'v128',	'v128',	None,	None,	0x0,	0xfd,	0xb2,	'F64X2ConvertUI64X2'))
WasmOpcode.add_opcode(WasmOpcode('atomic.wake'               ,	'i32',	'i32',	'i32',	None,	0x4,	0xfe,	0x0,	'AtomicWake'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.wait'           ,	'i32',	'i32',	'i32',	'i64',	0x4,	0xfe,	0x1,	'I32AtomicWait'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.wait'           ,	'i32',	'i32',	'i64',	'i64',	0x8,	0xfe,	0x2,	'I64AtomicWait'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.load'           ,	'i32',	'i32',	None,	None,	0x4,	0xfe,	0x10,	'I32AtomicLoad'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.load'           ,	'i64',	'i32',	None,	None,	0x8,	0xfe,	0x11,	'I64AtomicLoad'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.load8_u'        ,	'i32',	'i32',	None,	None,	0x1,	0xfe,	0x12,	'I32AtomicLoad8U'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.load16_u'       ,	'i32',	'i32',	None,	None,	0x2,	0xfe,	0x13,	'I32AtomicLoad16U'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.load8_u'        ,	'i64',	'i32',	None,	None,	0x1,	0xfe,	0x14,	'I64AtomicLoad8U'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.load16_u'       ,	'i64',	'i32',	None,	None,	0x2,	0xfe,	0x15,	'I64AtomicLoad16U'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.load32_u'       ,	'i64',	'i32',	None,	None,	0x4,	0xfe,	0x16,	'I64AtomicLoad32U'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.store'          ,	None,	'i32',	'i32',	None,	0x4,	0xfe,	0x17,	'I32AtomicStore'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.store'          ,	None,	'i32',	'i64',	None,	0x8,	0xfe,	0x18,	'I64AtomicStore'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.store8'         ,	None,	'i32',	'i32',	None,	0x1,	0xfe,	0x19,	'I32AtomicStore8'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.store16'        ,	None,	'i32',	'i32',	None,	0x2,	0xfe,	0x1a,	'I32AtomicStore16'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.store8'         ,	None,	'i32',	'i64',	None,	0x1,	0xfe,	0x1b,	'I64AtomicStore8'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.store16'        ,	None,	'i32',	'i64',	None,	0x2,	0xfe,	0x1c,	'I64AtomicStore16'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.store32'        ,	None,	'i32',	'i64',	None,	0x4,	0xfe,	0x1d,	'I64AtomicStore32'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw.add'        ,	'i32',	'i32',	'i32',	None,	0x4,	0xfe,	0x1e,	'I32AtomicRmwAdd'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw.add'        ,	'i64',	'i32',	'i64',	None,	0x8,	0xfe,	0x1f,	'I64AtomicRmwAdd'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw8_u.add'     ,	'i32',	'i32',	'i32',	None,	0x1,	0xfe,	0x20,	'I32AtomicRmw8UAdd'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw16_u.add'    ,	'i32',	'i32',	'i32',	None,	0x2,	0xfe,	0x21,	'I32AtomicRmw16UAdd'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw8_u.add'     ,	'i64',	'i32',	'i64',	None,	0x1,	0xfe,	0x22,	'I64AtomicRmw8UAdd'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw16_u.add'    ,	'i64',	'i32',	'i64',	None,	0x2,	0xfe,	0x23,	'I64AtomicRmw16UAdd'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw32_u.add'    ,	'i64',	'i32',	'i64',	None,	0x4,	0xfe,	0x24,	'I64AtomicRmw32UAdd'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw.sub'        ,	'i32',	'i32',	'i32',	None,	0x4,	0xfe,	0x25,	'I32AtomicRmwSub'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw.sub'        ,	'i64',	'i32',	'i64',	None,	0x8,	0xfe,	0x26,	'I64AtomicRmwSub'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw8_u.sub'     ,	'i32',	'i32',	'i32',	None,	0x1,	0xfe,	0x27,	'I32AtomicRmw8USub'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw16_u.sub'    ,	'i32',	'i32',	'i32',	None,	0x2,	0xfe,	0x28,	'I32AtomicRmw16USub'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw8_u.sub'     ,	'i64',	'i32',	'i64',	None,	0x1,	0xfe,	0x29,	'I64AtomicRmw8USub'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw16_u.sub'    ,	'i64',	'i32',	'i64',	None,	0x2,	0xfe,	0x2a,	'I64AtomicRmw16USub'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw32_u.sub'    ,	'i64',	'i32',	'i64',	None,	0x4,	0xfe,	0x2b,	'I64AtomicRmw32USub'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw.and'        ,	'i32',	'i32',	'i32',	None,	0x4,	0xfe,	0x2c,	'I32AtomicRmwAnd'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw.and'        ,	'i64',	'i32',	'i64',	None,	0x8,	0xfe,	0x2d,	'I64AtomicRmwAnd'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw8_u.and'     ,	'i32',	'i32',	'i32',	None,	0x1,	0xfe,	0x2e,	'I32AtomicRmw8UAnd'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw16_u.and'    ,	'i32',	'i32',	'i32',	None,	0x2,	0xfe,	0x2f,	'I32AtomicRmw16UAnd'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw8_u.and'     ,	'i64',	'i32',	'i64',	None,	0x1,	0xfe,	0x30,	'I64AtomicRmw8UAnd'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw16_u.and'    ,	'i64',	'i32',	'i64',	None,	0x2,	0xfe,	0x31,	'I64AtomicRmw16UAnd'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw32_u.and'    ,	'i64',	'i32',	'i64',	None,	0x4,	0xfe,	0x32,	'I64AtomicRmw32UAnd'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw.or'         ,	'i32',	'i32',	'i32',	None,	0x4,	0xfe,	0x33,	'I32AtomicRmwOr'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw.or'         ,	'i64',	'i32',	'i64',	None,	0x8,	0xfe,	0x34,	'I64AtomicRmwOr'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw8_u.or'      ,	'i32',	'i32',	'i32',	None,	0x1,	0xfe,	0x35,	'I32AtomicRmw8UOr'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw16_u.or'     ,	'i32',	'i32',	'i32',	None,	0x2,	0xfe,	0x36,	'I32AtomicRmw16UOr'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw8_u.or'      ,	'i64',	'i32',	'i64',	None,	0x1,	0xfe,	0x37,	'I64AtomicRmw8UOr'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw16_u.or'     ,	'i64',	'i32',	'i64',	None,	0x2,	0xfe,	0x38,	'I64AtomicRmw16UOr'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw32_u.or'     ,	'i64',	'i32',	'i64',	None,	0x4,	0xfe,	0x39,	'I64AtomicRmw32UOr'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw.xor'        ,	'i32',	'i32',	'i32',	None,	0x4,	0xfe,	0x3a,	'I32AtomicRmwXor'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw.xor'        ,	'i64',	'i32',	'i64',	None,	0x8,	0xfe,	0x3b,	'I64AtomicRmwXor'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw8_u.xor'     ,	'i32',	'i32',	'i32',	None,	0x1,	0xfe,	0x3c,	'I32AtomicRmw8UXor'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw16_u.xor'    ,	'i32',	'i32',	'i32',	None,	0x2,	0xfe,	0x3d,	'I32AtomicRmw16UXor'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw8_u.xor'     ,	'i64',	'i32',	'i64',	None,	0x1,	0xfe,	0x3e,	'I64AtomicRmw8UXor'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw16_u.xor'    ,	'i64',	'i32',	'i64',	None,	0x2,	0xfe,	0x3f,	'I64AtomicRmw16UXor'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw32_u.xor'    ,	'i64',	'i32',	'i64',	None,	0x4,	0xfe,	0x40,	'I64AtomicRmw32UXor'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw.xchg'       ,	'i32',	'i32',	'i32',	None,	0x4,	0xfe,	0x41,	'I32AtomicRmwXchg'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw.xchg'       ,	'i64',	'i32',	'i64',	None,	0x8,	0xfe,	0x42,	'I64AtomicRmwXchg'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw8_u.xchg'    ,	'i32',	'i32',	'i32',	None,	0x1,	0xfe,	0x43,	'I32AtomicRmw8UXchg'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw16_u.xchg'   ,	'i32',	'i32',	'i32',	None,	0x2,	0xfe,	0x44,	'I32AtomicRmw16UXchg'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw8_u.xchg'    ,	'i64',	'i32',	'i64',	None,	0x1,	0xfe,	0x45,	'I64AtomicRmw8UXchg'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw16_u.xchg'   ,	'i64',	'i32',	'i64',	None,	0x2,	0xfe,	0x46,	'I64AtomicRmw16UXchg'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw32_u.xchg'   ,	'i64',	'i32',	'i64',	None,	0x4,	0xfe,	0x47,	'I64AtomicRmw32UXchg'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw.cmpxchg'    ,	'i32',	'i32',	'i32',	'i32',	0x4,	0xfe,	0x48,	'I32AtomicRmwCmpxchg'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw.cmpxchg'    ,	'i64',	'i32',	'i64',	'i64',	0x8,	0xfe,	0x49,	'I64AtomicRmwCmpxchg'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw8_u.cmpxchg' ,	'i32',	'i32',	'i32',	'i32',	0x1,	0xfe,	0x4a,	'I32AtomicRmw8UCmpxchg'))
WasmOpcode.add_opcode(WasmOpcode('i32.atomic.rmw16_u.cmpxchg',	'i32',	'i32',	'i32',	'i32',	0x2,	0xfe,	0x4b,	'I32AtomicRmw16UCmpxchg'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw8_u.cmpxchg' ,	'i64',	'i32',	'i64',	'i64',	0x1,	0xfe,	0x4c,	'I64AtomicRmw8UCmpxchg'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw16_u.cmpxchg',	'i64',	'i32',	'i64',	'i64',	0x2,	0xfe,	0x4d,	'I64AtomicRmw16UCmpxchg'))
WasmOpcode.add_opcode(WasmOpcode('i64.atomic.rmw32_u.cmpxchg',	'i64',	'i32',	'i64',	'i64',	0x4,	0xfe,	0x4e,	'I64AtomicRmw32UCmpxchg'))
